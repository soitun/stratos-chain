// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stratos/pot/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryVolumeReportRequest is request type for the Query/VolumeReport RPC method
type QueryVolumeReportRequest struct {
	// epoch defines the epoch number to query for.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryVolumeReportRequest) Reset()         { *m = QueryVolumeReportRequest{} }
func (m *QueryVolumeReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVolumeReportRequest) ProtoMessage()    {}
func (*QueryVolumeReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{0}
}
func (m *QueryVolumeReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVolumeReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVolumeReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVolumeReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVolumeReportRequest.Merge(m, src)
}
func (m *QueryVolumeReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVolumeReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVolumeReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVolumeReportRequest proto.InternalMessageInfo

func (m *QueryVolumeReportRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// QueryVolumeReportResponse is response type for the Query/ResourceNode RPC method
type QueryVolumeReportResponse struct {
	// node defines the the volumeReport info.
	ReportInfo *ReportInfo `protobuf:"bytes,1,opt,name=report_info,json=reportInfo,proto3" json:"report_info,omitempty"`
}

func (m *QueryVolumeReportResponse) Reset()         { *m = QueryVolumeReportResponse{} }
func (m *QueryVolumeReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVolumeReportResponse) ProtoMessage()    {}
func (*QueryVolumeReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{1}
}
func (m *QueryVolumeReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVolumeReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVolumeReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVolumeReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVolumeReportResponse.Merge(m, src)
}
func (m *QueryVolumeReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVolumeReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVolumeReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVolumeReportResponse proto.InternalMessageInfo

func (m *QueryVolumeReportResponse) GetReportInfo() *ReportInfo {
	if m != nil {
		return m.ReportInfo
	}
	return nil
}

type ReportInfo struct {
	Epoch     int64  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	TxHash    string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Reporter  string `protobuf:"bytes,4,opt,name=reporter,proto3" json:"reporter,omitempty"`
}

func (m *ReportInfo) Reset()         { *m = ReportInfo{} }
func (m *ReportInfo) String() string { return proto.CompactTextString(m) }
func (*ReportInfo) ProtoMessage()    {}
func (*ReportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{2}
}
func (m *ReportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportInfo.Merge(m, src)
}
func (m *ReportInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReportInfo proto.InternalMessageInfo

func (m *ReportInfo) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ReportInfo) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *ReportInfo) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReportInfo) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{3}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{4}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryRewardsByEpochRequest is request type for the Query/RewardsByEpoch by a given epoch RPC method
type QueryRewardsByEpochRequest struct {
	Epoch      int64              `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsByEpochRequest) Reset()         { *m = QueryRewardsByEpochRequest{} }
func (m *QueryRewardsByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByEpochRequest) ProtoMessage()    {}
func (*QueryRewardsByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{5}
}
func (m *QueryRewardsByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByEpochRequest.Merge(m, src)
}
func (m *QueryRewardsByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByEpochRequest proto.InternalMessageInfo

func (m *QueryRewardsByEpochRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryRewardsByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardsByEpochResponse is response type for the Query/RewardsByEpoch RPC method
type QueryRewardsByEpochResponse struct {
	Rewards    []*Reward           `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsByEpochResponse) Reset()         { *m = QueryRewardsByEpochResponse{} }
func (m *QueryRewardsByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByEpochResponse) ProtoMessage()    {}
func (*QueryRewardsByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{6}
}
func (m *QueryRewardsByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByEpochResponse.Merge(m, src)
}
func (m *QueryRewardsByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByEpochResponse proto.InternalMessageInfo

func (m *QueryRewardsByEpochResponse) GetRewards() []*Reward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryRewardsByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardsByOwnerRequest is request type for the Query/RewardsByOwner by a given owner RPC method
type QueryRewardsByWalletRequest struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (m *QueryRewardsByWalletRequest) Reset()         { *m = QueryRewardsByWalletRequest{} }
func (m *QueryRewardsByWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByWalletRequest) ProtoMessage()    {}
func (*QueryRewardsByWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{7}
}
func (m *QueryRewardsByWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByWalletRequest.Merge(m, src)
}
func (m *QueryRewardsByWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByWalletRequest proto.InternalMessageInfo

func (m *QueryRewardsByWalletRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

// QueryRewardsByOwnerResponse is response type for the Query/RewardsByOwner RPC method
type QueryRewardsByWalletResponse struct {
	Rewards *RewardByWallet `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *QueryRewardsByWalletResponse) Reset()         { *m = QueryRewardsByWalletResponse{} }
func (m *QueryRewardsByWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByWalletResponse) ProtoMessage()    {}
func (*QueryRewardsByWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{8}
}
func (m *QueryRewardsByWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByWalletResponse.Merge(m, src)
}
func (m *QueryRewardsByWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByWalletResponse proto.InternalMessageInfo

func (m *QueryRewardsByWalletResponse) GetRewards() *RewardByWallet {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type QueryRewardsByWalletAndHeightRequest struct {
	WalletAddress string             `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Height        int64              `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsByWalletAndHeightRequest) Reset()         { *m = QueryRewardsByWalletAndHeightRequest{} }
func (m *QueryRewardsByWalletAndHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByWalletAndHeightRequest) ProtoMessage()    {}
func (*QueryRewardsByWalletAndHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{9}
}
func (m *QueryRewardsByWalletAndHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByWalletAndHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByWalletAndHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByWalletAndHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByWalletAndHeightRequest.Merge(m, src)
}
func (m *QueryRewardsByWalletAndHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByWalletAndHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByWalletAndHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByWalletAndHeightRequest proto.InternalMessageInfo

func (m *QueryRewardsByWalletAndHeightRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *QueryRewardsByWalletAndHeightRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryRewardsByWalletAndHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRewardsByWalletAndHeightResponse struct {
	Rewards *RewardByWallet `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards,omitempty"`
}

func (m *QueryRewardsByWalletAndHeightResponse) Reset()         { *m = QueryRewardsByWalletAndHeightResponse{} }
func (m *QueryRewardsByWalletAndHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByWalletAndHeightResponse) ProtoMessage()    {}
func (*QueryRewardsByWalletAndHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{10}
}
func (m *QueryRewardsByWalletAndHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByWalletAndHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByWalletAndHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByWalletAndHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByWalletAndHeightResponse.Merge(m, src)
}
func (m *QueryRewardsByWalletAndHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByWalletAndHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByWalletAndHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByWalletAndHeightResponse proto.InternalMessageInfo

func (m *QueryRewardsByWalletAndHeightResponse) GetRewards() *RewardByWallet {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type QueryRewardsByWalletAndEpochRequest struct {
	WalletAddress string             `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Epoch         int64              `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsByWalletAndEpochRequest) Reset()         { *m = QueryRewardsByWalletAndEpochRequest{} }
func (m *QueryRewardsByWalletAndEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByWalletAndEpochRequest) ProtoMessage()    {}
func (*QueryRewardsByWalletAndEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{11}
}
func (m *QueryRewardsByWalletAndEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByWalletAndEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByWalletAndEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByWalletAndEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByWalletAndEpochRequest.Merge(m, src)
}
func (m *QueryRewardsByWalletAndEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByWalletAndEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByWalletAndEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByWalletAndEpochRequest proto.InternalMessageInfo

func (m *QueryRewardsByWalletAndEpochRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *QueryRewardsByWalletAndEpochRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryRewardsByWalletAndEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRewardsByWalletAndEpochResponse struct {
	Rewards    []*Reward           `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsByWalletAndEpochResponse) Reset()         { *m = QueryRewardsByWalletAndEpochResponse{} }
func (m *QueryRewardsByWalletAndEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsByWalletAndEpochResponse) ProtoMessage()    {}
func (*QueryRewardsByWalletAndEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{12}
}
func (m *QueryRewardsByWalletAndEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsByWalletAndEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsByWalletAndEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsByWalletAndEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsByWalletAndEpochResponse.Merge(m, src)
}
func (m *QueryRewardsByWalletAndEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsByWalletAndEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsByWalletAndEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsByWalletAndEpochResponse proto.InternalMessageInfo

func (m *QueryRewardsByWalletAndEpochResponse) GetRewards() []*Reward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryRewardsByWalletAndEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type RewardByWallet struct {
	WalletAddress       string                                   `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	MatureTotalReward   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=mature_total_reward,json=matureTotalReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"mature_total_reward"`
	ImmatureTotalReward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=immature_total_reward,json=immatureTotalReward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"immature_total_reward"`
}

func (m *RewardByWallet) Reset()         { *m = RewardByWallet{} }
func (m *RewardByWallet) String() string { return proto.CompactTextString(m) }
func (*RewardByWallet) ProtoMessage()    {}
func (*RewardByWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{13}
}
func (m *RewardByWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardByWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardByWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardByWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardByWallet.Merge(m, src)
}
func (m *RewardByWallet) XXX_Size() int {
	return m.Size()
}
func (m *RewardByWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardByWallet.DiscardUnknown(m)
}

var xxx_messageInfo_RewardByWallet proto.InternalMessageInfo

func (m *RewardByWallet) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *RewardByWallet) GetMatureTotalReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MatureTotalReward
	}
	return nil
}

func (m *RewardByWallet) GetImmatureTotalReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ImmatureTotalReward
	}
	return nil
}

// QuerySlashingByOwnerRequest is request type for the Query/Slashing by a given owner RPC method
type QuerySlashingByOwnerRequest struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (m *QuerySlashingByOwnerRequest) Reset()         { *m = QuerySlashingByOwnerRequest{} }
func (m *QuerySlashingByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySlashingByOwnerRequest) ProtoMessage()    {}
func (*QuerySlashingByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{14}
}
func (m *QuerySlashingByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashingByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashingByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashingByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashingByOwnerRequest.Merge(m, src)
}
func (m *QuerySlashingByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashingByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashingByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashingByOwnerRequest proto.InternalMessageInfo

func (m *QuerySlashingByOwnerRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

// QuerySlashingByOwnerResponse is response type for the Query/Slashing RPC method
type QuerySlashingByOwnerResponse struct {
	Slashing string `protobuf:"bytes,1,opt,name=slashing,proto3" json:"slashing,omitempty"`
}

func (m *QuerySlashingByOwnerResponse) Reset()         { *m = QuerySlashingByOwnerResponse{} }
func (m *QuerySlashingByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySlashingByOwnerResponse) ProtoMessage()    {}
func (*QuerySlashingByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{15}
}
func (m *QuerySlashingByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashingByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashingByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashingByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashingByOwnerResponse.Merge(m, src)
}
func (m *QuerySlashingByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashingByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashingByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashingByOwnerResponse proto.InternalMessageInfo

func (m *QuerySlashingByOwnerResponse) GetSlashing() string {
	if m != nil {
		return m.Slashing
	}
	return ""
}

type QueryTotalMinedTokenRequest struct {
}

func (m *QueryTotalMinedTokenRequest) Reset()         { *m = QueryTotalMinedTokenRequest{} }
func (m *QueryTotalMinedTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalMinedTokenRequest) ProtoMessage()    {}
func (*QueryTotalMinedTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{16}
}
func (m *QueryTotalMinedTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalMinedTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalMinedTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalMinedTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalMinedTokenRequest.Merge(m, src)
}
func (m *QueryTotalMinedTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalMinedTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalMinedTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalMinedTokenRequest proto.InternalMessageInfo

type QueryTotalMinedTokenResponse struct {
	TotalMinedToken types.Coin `protobuf:"bytes,1,opt,name=total_mined_token,json=totalMinedToken,proto3" json:"total_mined_token" yaml:"total_mined_token"`
}

func (m *QueryTotalMinedTokenResponse) Reset()         { *m = QueryTotalMinedTokenResponse{} }
func (m *QueryTotalMinedTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalMinedTokenResponse) ProtoMessage()    {}
func (*QueryTotalMinedTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{17}
}
func (m *QueryTotalMinedTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalMinedTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalMinedTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalMinedTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalMinedTokenResponse.Merge(m, src)
}
func (m *QueryTotalMinedTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalMinedTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalMinedTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalMinedTokenResponse proto.InternalMessageInfo

func (m *QueryTotalMinedTokenResponse) GetTotalMinedToken() types.Coin {
	if m != nil {
		return m.TotalMinedToken
	}
	return types.Coin{}
}

type QueryCirculationSupplyRequest struct {
}

func (m *QueryCirculationSupplyRequest) Reset()         { *m = QueryCirculationSupplyRequest{} }
func (m *QueryCirculationSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCirculationSupplyRequest) ProtoMessage()    {}
func (*QueryCirculationSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{18}
}
func (m *QueryCirculationSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculationSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculationSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculationSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculationSupplyRequest.Merge(m, src)
}
func (m *QueryCirculationSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculationSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculationSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculationSupplyRequest proto.InternalMessageInfo

type QueryCirculationSupplyResponse struct {
	CirculationSupply github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=circulation_supply,json=circulationSupply,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"circulation_supply"`
}

func (m *QueryCirculationSupplyResponse) Reset()         { *m = QueryCirculationSupplyResponse{} }
func (m *QueryCirculationSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCirculationSupplyResponse) ProtoMessage()    {}
func (*QueryCirculationSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{19}
}
func (m *QueryCirculationSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCirculationSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCirculationSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCirculationSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCirculationSupplyResponse.Merge(m, src)
}
func (m *QueryCirculationSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCirculationSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCirculationSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCirculationSupplyResponse proto.InternalMessageInfo

func (m *QueryCirculationSupplyResponse) GetCirculationSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CirculationSupply
	}
	return nil
}

type QueryTotalRewardByEpochRequest struct {
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryTotalRewardByEpochRequest) Reset()         { *m = QueryTotalRewardByEpochRequest{} }
func (m *QueryTotalRewardByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRewardByEpochRequest) ProtoMessage()    {}
func (*QueryTotalRewardByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{20}
}
func (m *QueryTotalRewardByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRewardByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRewardByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRewardByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRewardByEpochRequest.Merge(m, src)
}
func (m *QueryTotalRewardByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRewardByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRewardByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRewardByEpochRequest proto.InternalMessageInfo

func (m *QueryTotalRewardByEpochRequest) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type QueryTotalRewardByEpochResponse struct {
	TotalReward TotalReward `protobuf:"bytes,1,opt,name=total_reward,json=totalReward,proto3" json:"total_reward" yaml:"total_reward"`
	IsLegacy    bool        `protobuf:"varint,2,opt,name=is_legacy,json=isLegacy,proto3" json:"is_legacy" yaml:"is_legacy"`
}

func (m *QueryTotalRewardByEpochResponse) Reset()         { *m = QueryTotalRewardByEpochResponse{} }
func (m *QueryTotalRewardByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRewardByEpochResponse) ProtoMessage()    {}
func (*QueryTotalRewardByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{21}
}
func (m *QueryTotalRewardByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRewardByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRewardByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRewardByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRewardByEpochResponse.Merge(m, src)
}
func (m *QueryTotalRewardByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRewardByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRewardByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRewardByEpochResponse proto.InternalMessageInfo

func (m *QueryTotalRewardByEpochResponse) GetTotalReward() TotalReward {
	if m != nil {
		return m.TotalReward
	}
	return TotalReward{}
}

func (m *QueryTotalRewardByEpochResponse) GetIsLegacy() bool {
	if m != nil {
		return m.IsLegacy
	}
	return false
}

type QueryMetricsRequest struct {
}

func (m *QueryMetricsRequest) Reset()         { *m = QueryMetricsRequest{} }
func (m *QueryMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMetricsRequest) ProtoMessage()    {}
func (*QueryMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{22}
}
func (m *QueryMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetricsRequest.Merge(m, src)
}
func (m *QueryMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetricsRequest proto.InternalMessageInfo

type QueryMetricsResponse struct {
	Metrics Metrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics"`
}

func (m *QueryMetricsResponse) Reset()         { *m = QueryMetricsResponse{} }
func (m *QueryMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMetricsResponse) ProtoMessage()    {}
func (*QueryMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c09bd09df76a68e0, []int{23}
}
func (m *QueryMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetricsResponse.Merge(m, src)
}
func (m *QueryMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetricsResponse proto.InternalMessageInfo

func (m *QueryMetricsResponse) GetMetrics() Metrics {
	if m != nil {
		return m.Metrics
	}
	return Metrics{}
}

func init() {
	proto.RegisterType((*QueryVolumeReportRequest)(nil), "stratos.pot.v1.QueryVolumeReportRequest")
	proto.RegisterType((*QueryVolumeReportResponse)(nil), "stratos.pot.v1.QueryVolumeReportResponse")
	proto.RegisterType((*ReportInfo)(nil), "stratos.pot.v1.ReportInfo")
	proto.RegisterType((*QueryParamsRequest)(nil), "stratos.pot.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "stratos.pot.v1.QueryParamsResponse")
	proto.RegisterType((*QueryRewardsByEpochRequest)(nil), "stratos.pot.v1.QueryRewardsByEpochRequest")
	proto.RegisterType((*QueryRewardsByEpochResponse)(nil), "stratos.pot.v1.QueryRewardsByEpochResponse")
	proto.RegisterType((*QueryRewardsByWalletRequest)(nil), "stratos.pot.v1.QueryRewardsByWalletRequest")
	proto.RegisterType((*QueryRewardsByWalletResponse)(nil), "stratos.pot.v1.QueryRewardsByWalletResponse")
	proto.RegisterType((*QueryRewardsByWalletAndHeightRequest)(nil), "stratos.pot.v1.QueryRewardsByWalletAndHeightRequest")
	proto.RegisterType((*QueryRewardsByWalletAndHeightResponse)(nil), "stratos.pot.v1.QueryRewardsByWalletAndHeightResponse")
	proto.RegisterType((*QueryRewardsByWalletAndEpochRequest)(nil), "stratos.pot.v1.QueryRewardsByWalletAndEpochRequest")
	proto.RegisterType((*QueryRewardsByWalletAndEpochResponse)(nil), "stratos.pot.v1.QueryRewardsByWalletAndEpochResponse")
	proto.RegisterType((*RewardByWallet)(nil), "stratos.pot.v1.RewardByWallet")
	proto.RegisterType((*QuerySlashingByOwnerRequest)(nil), "stratos.pot.v1.QuerySlashingByOwnerRequest")
	proto.RegisterType((*QuerySlashingByOwnerResponse)(nil), "stratos.pot.v1.QuerySlashingByOwnerResponse")
	proto.RegisterType((*QueryTotalMinedTokenRequest)(nil), "stratos.pot.v1.QueryTotalMinedTokenRequest")
	proto.RegisterType((*QueryTotalMinedTokenResponse)(nil), "stratos.pot.v1.QueryTotalMinedTokenResponse")
	proto.RegisterType((*QueryCirculationSupplyRequest)(nil), "stratos.pot.v1.QueryCirculationSupplyRequest")
	proto.RegisterType((*QueryCirculationSupplyResponse)(nil), "stratos.pot.v1.QueryCirculationSupplyResponse")
	proto.RegisterType((*QueryTotalRewardByEpochRequest)(nil), "stratos.pot.v1.QueryTotalRewardByEpochRequest")
	proto.RegisterType((*QueryTotalRewardByEpochResponse)(nil), "stratos.pot.v1.QueryTotalRewardByEpochResponse")
	proto.RegisterType((*QueryMetricsRequest)(nil), "stratos.pot.v1.QueryMetricsRequest")
	proto.RegisterType((*QueryMetricsResponse)(nil), "stratos.pot.v1.QueryMetricsResponse")
}

func init() { proto.RegisterFile("stratos/pot/v1/query.proto", fileDescriptor_c09bd09df76a68e0) }

var fileDescriptor_c09bd09df76a68e0 = []byte{
	// 1323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x5f, 0x4f, 0xdb, 0x56,
	0x14, 0xc7, 0xa4, 0xe5, 0xcf, 0xa1, 0x85, 0x71, 0xa1, 0x10, 0x5c, 0x9a, 0x50, 0x03, 0x2d, 0x7f,
	0x8a, 0x4d, 0x68, 0xbb, 0x4e, 0x9d, 0xb6, 0x8a, 0x74, 0xac, 0xad, 0xb4, 0xaa, 0x9d, 0x5b, 0x6d,
	0xd5, 0x5e, 0x22, 0x93, 0x5c, 0x12, 0x8b, 0xc4, 0xd7, 0xd8, 0x37, 0x40, 0xca, 0xd0, 0xa4, 0x7d,
	0x82, 0x69, 0x7b, 0x58, 0x1f, 0xa6, 0x4d, 0xd3, 0xb4, 0x97, 0x4a, 0x7b, 0xdc, 0x77, 0xa8, 0x34,
	0x69, 0x42, 0xda, 0xcb, 0x9e, 0xb2, 0x09, 0xf6, 0x54, 0x69, 0x2f, 0x7c, 0x82, 0x29, 0xf7, 0xde,
	0x98, 0xd8, 0xb1, 0x21, 0xe9, 0x36, 0xa9, 0x4f, 0xd8, 0xe7, 0xef, 0xef, 0x77, 0xee, 0xf1, 0x3d,
	0x27, 0x80, 0xec, 0x52, 0xc7, 0xa0, 0xc4, 0xd5, 0x6c, 0x42, 0xb5, 0xcd, 0x94, 0xb6, 0x51, 0xc6,
	0x4e, 0x45, 0xb5, 0x1d, 0x42, 0x09, 0xea, 0x17, 0x3a, 0xd5, 0x26, 0x54, 0xdd, 0x4c, 0xc9, 0xc3,
	0x79, 0x92, 0x27, 0x4c, 0xa5, 0xd5, 0x9e, 0xb8, 0x95, 0x3c, 0x9e, 0x27, 0x24, 0x5f, 0xc4, 0x9a,
	0x61, 0x9b, 0x9a, 0x61, 0x59, 0x84, 0x1a, 0xd4, 0x24, 0x96, 0x2b, 0xb4, 0x89, 0x2c, 0x71, 0x4b,
	0xc4, 0xd5, 0x56, 0x0d, 0x17, 0x6b, 0x9b, 0xa9, 0x55, 0x4c, 0x8d, 0x94, 0x96, 0x25, 0xa6, 0x25,
	0xf4, 0x73, 0x8d, 0x7a, 0x96, 0xdc, 0xb3, 0xb2, 0x8d, 0xbc, 0x69, 0xb1, 0x60, 0xc2, 0x36, 0x1e,
	0xc0, 0x5a, 0x83, 0xc5, 0x34, 0xca, 0x22, 0xc4, 0x3f, 0xac, 0xf9, 0x7e, 0x44, 0x8a, 0xe5, 0x12,
	0xd6, 0xb1, 0x4d, 0x1c, 0xaa, 0xe3, 0x8d, 0x32, 0x76, 0x29, 0x1a, 0x86, 0xd3, 0xd8, 0x26, 0xd9,
	0x42, 0x5c, 0x9a, 0x90, 0x66, 0x62, 0x3a, 0x7f, 0x51, 0x9e, 0xc0, 0x58, 0x88, 0x87, 0x6b, 0x13,
	0xcb, 0xc5, 0xe8, 0x6d, 0xe8, 0x73, 0x98, 0x24, 0x63, 0x5a, 0x6b, 0x84, 0x39, 0xf6, 0x2d, 0xc9,
	0xaa, 0xbf, 0x1c, 0x2a, 0x77, 0xba, 0x67, 0xad, 0x11, 0x1d, 0x1c, 0xef, 0x59, 0x29, 0x03, 0x1c,
	0x69, 0xc2, 0xb3, 0xa3, 0x71, 0xe8, 0x75, 0xf0, 0x1a, 0x76, 0xb0, 0x95, 0xc5, 0xf1, 0xce, 0x09,
	0x69, 0xa6, 0x57, 0x3f, 0x12, 0xa0, 0x51, 0xe8, 0xa6, 0xdb, 0x99, 0x82, 0xe1, 0x16, 0xe2, 0x31,
	0xa6, 0xeb, 0xa2, 0xdb, 0x77, 0x0d, 0xb7, 0x80, 0x64, 0xe8, 0xe1, 0x89, 0xb0, 0x13, 0x3f, 0xc5,
	0x34, 0xde, 0xbb, 0x32, 0x0c, 0x88, 0x11, 0x7a, 0x68, 0x38, 0x46, 0xc9, 0x15, 0xe4, 0x95, 0x15,
	0x18, 0xf2, 0x49, 0x05, 0x41, 0x15, 0xba, 0x6c, 0x26, 0x11, 0xdc, 0x46, 0x82, 0xdc, 0x84, 0xbd,
	0xb0, 0x52, 0x9e, 0x82, 0xcc, 0xc2, 0xe8, 0x78, 0xcb, 0x70, 0x72, 0x6e, 0xba, 0xb2, 0x52, 0xa3,
	0x71, 0x6c, 0x85, 0xd1, 0xfb, 0x00, 0x47, 0x27, 0xc8, 0x48, 0xf6, 0x2d, 0x5d, 0x52, 0xf9, 0x71,
	0xab, 0xb5, 0xe3, 0x56, 0x79, 0xaf, 0x89, 0xe3, 0x56, 0x1f, 0x1a, 0x79, 0x2c, 0x22, 0xea, 0x0d,
	0x9e, 0xca, 0x33, 0x09, 0xce, 0x87, 0x26, 0x17, 0x5c, 0x16, 0xa1, 0xdb, 0xe1, 0x9a, 0xb8, 0x34,
	0x11, 0x0b, 0x23, 0xc3, 0x1d, 0xf5, 0xba, 0x19, 0xba, 0x13, 0x82, 0xec, 0xf2, 0x89, 0xc8, 0x78,
	0x3a, 0x1f, 0xb4, 0xf7, 0x82, 0xc8, 0x3e, 0x36, 0x8a, 0x45, 0xec, 0x75, 0xde, 0x34, 0xf4, 0x6f,
	0x31, 0x41, 0xc6, 0xc8, 0xe5, 0x1c, 0xec, 0xf2, 0x6a, 0xf7, 0xea, 0x67, 0xb9, 0x74, 0x99, 0x0b,
	0x95, 0x27, 0x30, 0x1e, 0x1e, 0x45, 0x10, 0x7c, 0xab, 0x91, 0x60, 0x0d, 0x6b, 0x22, 0x9c, 0xa0,
	0xe7, 0x58, 0x37, 0x57, 0x7e, 0x92, 0x60, 0x2a, 0x2c, 0xf4, 0xb2, 0x95, 0xbb, 0x8b, 0xcd, 0x7c,
	0xa1, 0x4d, 0xa4, 0x68, 0x04, 0xba, 0x0a, 0xcc, 0x8f, 0x15, 0x2d, 0xa6, 0x8b, 0xb7, 0xc0, 0x51,
	0xc7, 0x5e, 0xf9, 0xa8, 0x0d, 0x98, 0x3e, 0x01, 0xee, 0xbf, 0x2e, 0xc9, 0x73, 0x09, 0x26, 0x23,
	0x72, 0xf8, 0x7a, 0xba, 0xc5, 0x8a, 0x78, 0xad, 0xdf, 0x19, 0xdd, 0xfa, 0xaf, 0x5e, 0x8f, 0xef,
	0xa3, 0xcf, 0xef, 0xb5, 0xf9, 0x06, 0x7e, 0xee, 0x84, 0x7e, 0x7f, 0xb1, 0x5b, 0xad, 0xdd, 0x0e,
	0x0c, 0x95, 0x0c, 0x5a, 0x76, 0x70, 0x86, 0x12, 0x6a, 0x14, 0x33, 0x1c, 0x5a, 0xbc, 0x93, 0x11,
	0x18, 0xf3, 0x61, 0xa9, 0xa3, 0xb8, 0x4d, 0x4c, 0x2b, 0xbd, 0xf8, 0xa2, 0x9a, 0xec, 0x78, 0xfe,
	0x47, 0x72, 0x26, 0x6f, 0xd2, 0x42, 0x79, 0x55, 0xcd, 0x92, 0x92, 0x26, 0xa6, 0x08, 0xff, 0xb3,
	0xe0, 0xe6, 0xd6, 0x35, 0x5a, 0xb1, 0xb1, 0xcb, 0x1c, 0x5c, 0x7d, 0x90, 0xe7, 0x79, 0x5c, 0x4b,
	0xc3, 0xb1, 0xa2, 0xcf, 0xe0, 0x9c, 0x59, 0x0a, 0x4b, 0x1f, 0xfb, 0xef, 0xd3, 0x0f, 0xd5, 0x33,
	0x35, 0x00, 0xf0, 0xee, 0x8e, 0x47, 0x45, 0xc3, 0x2d, 0x98, 0x56, 0x3e, 0x5d, 0x79, 0xb0, 0x65,
	0x61, 0xa7, 0xcd, 0xbb, 0xe3, 0xa6, 0xb8, 0x3b, 0x9a, 0xa2, 0x88, 0xc6, 0x90, 0xa1, 0xc7, 0x15,
	0x2a, 0x11, 0xc0, 0x7b, 0x57, 0x2e, 0x08, 0x04, 0x0c, 0xd5, 0x7d, 0xd3, 0xc2, 0xb9, 0xc7, 0x64,
	0x1d, 0x5b, 0xf5, 0xd1, 0xf1, 0x8d, 0x24, 0x62, 0x37, 0xe9, 0x45, 0xec, 0x4f, 0x61, 0x90, 0x57,
	0xae, 0x54, 0xd3, 0x65, 0x68, 0x4d, 0x29, 0x3e, 0xc7, 0x63, 0xca, 0x77, 0xbd, 0x56, 0xbe, 0x97,
	0xd5, 0x64, 0xb3, 0xef, 0x61, 0x35, 0x19, 0xaf, 0x18, 0xa5, 0xe2, 0x4d, 0xa5, 0x49, 0xa5, 0xe8,
	0x03, 0xd4, 0x8f, 0x42, 0x49, 0xc2, 0x05, 0x86, 0xee, 0xb6, 0xe9, 0x64, 0xcb, 0x45, 0xd6, 0x8b,
	0x8f, 0xca, 0xb6, 0x5d, 0xac, 0x34, 0xe0, 0x4f, 0x44, 0x59, 0x08, 0x06, 0x4f, 0x01, 0x65, 0x8f,
	0x94, 0x19, 0x97, 0x69, 0xff, 0x8f, 0x0e, 0x18, 0xcc, 0x06, 0x31, 0x28, 0x6f, 0x0a, 0x74, 0x0d,
	0x3d, 0xd1, 0xca, 0x58, 0x55, 0x7e, 0x95, 0x20, 0x19, 0xe9, 0x28, 0x78, 0xad, 0xc3, 0x19, 0x5f,
	0x4f, 0xf3, 0x43, 0x39, 0x1f, 0xbc, 0x13, 0x1a, 0x23, 0xcc, 0x8b, 0x63, 0xf1, 0x39, 0x1e, 0x56,
	0x93, 0x43, 0x8d, 0x27, 0xc2, 0xa5, 0x8a, 0xde, 0x47, 0x1b, 0xbe, 0xa4, 0x77, 0xa1, 0xd7, 0x74,
	0x33, 0x45, 0x9c, 0x37, 0xb2, 0x15, 0x76, 0x91, 0xf4, 0xa4, 0x2f, 0xbe, 0xac, 0x26, 0x8f, 0x84,
	0x87, 0xd5, 0xe4, 0x1b, 0x3c, 0x8a, 0x27, 0x52, 0xf4, 0x1e, 0xd3, 0xfd, 0x80, 0x3f, 0x9e, 0x13,
	0x2b, 0xca, 0x7d, 0x4c, 0x1d, 0x33, 0xeb, 0x6d, 0x2e, 0x0f, 0x60, 0xd8, 0x2f, 0x16, 0xdc, 0x6e,
	0x40, 0x77, 0x89, 0x8b, 0x04, 0xad, 0xd1, 0x20, 0x2d, 0xe1, 0x91, 0x3e, 0x55, 0xa3, 0xa4, 0xd7,
	0xad, 0x97, 0xfe, 0x3e, 0x0b, 0xa7, 0x59, 0x44, 0xf4, 0xa5, 0x04, 0x67, 0x1a, 0xf7, 0x3e, 0x34,
	0x13, 0x0c, 0x11, 0xb5, 0x4c, 0xca, 0xb3, 0x2d, 0x58, 0x72, 0xa0, 0xca, 0xc2, 0xe7, 0xbf, 0xfd,
	0xf5, 0x55, 0xe7, 0x65, 0x34, 0xad, 0x05, 0xd6, 0xd6, 0x4d, 0x66, 0x9d, 0xe1, 0x9b, 0x9b, 0xb6,
	0xc3, 0x8e, 0x75, 0x17, 0x3d, 0x93, 0xea, 0xf7, 0x68, 0x7d, 0xc3, 0x41, 0x73, 0xa1, 0xc9, 0x42,
	0x77, 0x30, 0x79, 0xbe, 0x25, 0xdb, 0x93, 0xa0, 0x89, 0xe9, 0xa0, 0x31, 0x4c, 0x1e, 0xb4, 0x1f,
	0x25, 0x18, 0x08, 0x4c, 0x20, 0x74, 0x42, 0x3e, 0xdf, 0x22, 0x24, 0x5f, 0x69, 0xcd, 0x58, 0xa0,
	0xbb, 0xc1, 0xd0, 0xa5, 0x90, 0x16, 0x85, 0x8e, 0x5f, 0x81, 0xda, 0x8e, 0xff, 0x82, 0xdc, 0x45,
	0x7b, 0x12, 0xc4, 0xa3, 0x56, 0x07, 0x74, 0xad, 0x15, 0x0c, 0xc1, 0xc5, 0x48, 0xbe, 0xde, 0xa6,
	0x97, 0xa0, 0x70, 0x87, 0x51, 0x58, 0x46, 0xb7, 0xda, 0xa4, 0xa0, 0xf1, 0x85, 0x4a, 0xdb, 0xe1,
	0x7f, 0x77, 0xd1, 0x2f, 0x12, 0x8c, 0x46, 0x0c, 0x7f, 0x74, 0xb5, 0x45, 0x6c, 0xbe, 0x3e, 0xb9,
	0xd6, 0x9e, 0x93, 0xe0, 0xb3, 0xc2, 0xf8, 0xdc, 0x42, 0xef, 0xb4, 0xcb, 0xc7, 0xdf, 0x48, 0xdf,
	0x49, 0x30, 0x10, 0x98, 0x54, 0x11, 0x8d, 0x14, 0x3e, 0x15, 0x23, 0x1a, 0x29, 0x62, 0xf8, 0x29,
	0x29, 0x86, 0x7a, 0x1e, 0xcd, 0x06, 0x51, 0xd7, 0x47, 0x60, 0x73, 0x0b, 0x6d, 0x40, 0x17, 0xff,
	0xe9, 0x83, 0x94, 0xd0, 0x54, 0xbe, 0x5f, 0x57, 0xf2, 0xe4, 0xb1, 0x36, 0x02, 0x45, 0x82, 0xa1,
	0x88, 0xa3, 0x91, 0x20, 0x0a, 0xfe, 0xdb, 0x0a, 0x7d, 0x2d, 0xc1, 0x40, 0x60, 0xc4, 0x46, 0x14,
	0x25, 0x7c, 0x50, 0x47, 0x14, 0x25, 0x62, 0x6a, 0x2b, 0xb3, 0x0c, 0xce, 0x24, 0xba, 0x18, 0x84,
	0xd3, 0x34, 0x74, 0xd1, 0xb7, 0x12, 0x0c, 0x36, 0x0d, 0x4f, 0xb4, 0x10, 0x9a, 0x2e, 0x6a, 0x0c,
	0xcb, 0x6a, 0xab, 0xe6, 0x02, 0xdf, 0x1c, 0xc3, 0x37, 0x85, 0x94, 0x20, 0xbe, 0xe6, 0x49, 0x8d,
	0x7e, 0x90, 0x00, 0x35, 0x8f, 0x41, 0xa4, 0x46, 0x17, 0x24, 0x6c, 0xd0, 0xca, 0x5a, 0xcb, 0xf6,
	0x02, 0xe3, 0x15, 0x86, 0xf1, 0x12, 0x9a, 0x0a, 0xaf, 0x21, 0xff, 0x28, 0xbc, 0xae, 0x2f, 0x43,
	0xb7, 0x18, 0x49, 0x28, 0xbc, 0x61, 0xfc, 0x93, 0x4f, 0x9e, 0x3a, 0xde, 0x48, 0x60, 0x48, 0x32,
	0x0c, 0x63, 0x68, 0x34, 0x88, 0x41, 0xcc, 0xbb, 0xf4, 0xbd, 0x17, 0xfb, 0x09, 0x69, 0x6f, 0x3f,
	0x21, 0xfd, 0xb9, 0x9f, 0x90, 0xbe, 0x38, 0x48, 0x74, 0xec, 0x1d, 0x24, 0x3a, 0x7e, 0x3f, 0x48,
	0x74, 0x7c, 0xa2, 0x35, 0xec, 0x2d, 0xc2, 0xd9, 0xc2, 0xb4, 0xfe, 0xb8, 0x90, 0x2d, 0x18, 0xa6,
	0xa5, 0x6d, 0xb3, 0x78, 0x6c, 0x89, 0x59, 0xed, 0x62, 0xff, 0x65, 0xb9, 0xfa, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x49, 0x81, 0x3b, 0xdb, 0x2d, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// VolumeReport queries VolumeReport info for given epoch.
	VolumeReport(ctx context.Context, in *QueryVolumeReportRequest, opts ...grpc.CallOption) (*QueryVolumeReportResponse, error)
	// RewardsByEpoch queries Pot rewards by a given epoch.
	RewardsByEpoch(ctx context.Context, in *QueryRewardsByEpochRequest, opts ...grpc.CallOption) (*QueryRewardsByEpochResponse, error)
	// RewardsByOwner queries Pot rewards by a given beneficiary address.
	RewardsByWallet(ctx context.Context, in *QueryRewardsByWalletRequest, opts ...grpc.CallOption) (*QueryRewardsByWalletResponse, error)
	// RewardsByWalletAndHeight queries Pot rewards by a given beneficiary address at the specific epoch.
	RewardsByWalletAndHeight(ctx context.Context, in *QueryRewardsByWalletAndHeightRequest, opts ...grpc.CallOption) (*QueryRewardsByWalletAndHeightResponse, error)
	// RewardsByWalletAndEpoch queries Pot rewards by a given beneficiary address at the specific epoch.
	RewardsByWalletAndEpoch(ctx context.Context, in *QueryRewardsByWalletAndEpochRequest, opts ...grpc.CallOption) (*QueryRewardsByWalletAndEpochResponse, error)
	// SlashingByOwner queries Pot slashing by owner wallet address.
	SlashingByOwner(ctx context.Context, in *QuerySlashingByOwnerRequest, opts ...grpc.CallOption) (*QuerySlashingByOwnerResponse, error)
	// Params queries POT module Params info.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	TotalMinedToken(ctx context.Context, in *QueryTotalMinedTokenRequest, opts ...grpc.CallOption) (*QueryTotalMinedTokenResponse, error)
	CirculationSupply(ctx context.Context, in *QueryCirculationSupplyRequest, opts ...grpc.CallOption) (*QueryCirculationSupplyResponse, error)
	TotalRewardByEpoch(ctx context.Context, in *QueryTotalRewardByEpochRequest, opts ...grpc.CallOption) (*QueryTotalRewardByEpochResponse, error)
	Metrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (*QueryMetricsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VolumeReport(ctx context.Context, in *QueryVolumeReportRequest, opts ...grpc.CallOption) (*QueryVolumeReportResponse, error) {
	out := new(QueryVolumeReportResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/VolumeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByEpoch(ctx context.Context, in *QueryRewardsByEpochRequest, opts ...grpc.CallOption) (*QueryRewardsByEpochResponse, error) {
	out := new(QueryRewardsByEpochResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/RewardsByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByWallet(ctx context.Context, in *QueryRewardsByWalletRequest, opts ...grpc.CallOption) (*QueryRewardsByWalletResponse, error) {
	out := new(QueryRewardsByWalletResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/RewardsByWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByWalletAndHeight(ctx context.Context, in *QueryRewardsByWalletAndHeightRequest, opts ...grpc.CallOption) (*QueryRewardsByWalletAndHeightResponse, error) {
	out := new(QueryRewardsByWalletAndHeightResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/RewardsByWalletAndHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByWalletAndEpoch(ctx context.Context, in *QueryRewardsByWalletAndEpochRequest, opts ...grpc.CallOption) (*QueryRewardsByWalletAndEpochResponse, error) {
	out := new(QueryRewardsByWalletAndEpochResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/RewardsByWalletAndEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashingByOwner(ctx context.Context, in *QuerySlashingByOwnerRequest, opts ...grpc.CallOption) (*QuerySlashingByOwnerResponse, error) {
	out := new(QuerySlashingByOwnerResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/SlashingByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalMinedToken(ctx context.Context, in *QueryTotalMinedTokenRequest, opts ...grpc.CallOption) (*QueryTotalMinedTokenResponse, error) {
	out := new(QueryTotalMinedTokenResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/TotalMinedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CirculationSupply(ctx context.Context, in *QueryCirculationSupplyRequest, opts ...grpc.CallOption) (*QueryCirculationSupplyResponse, error) {
	out := new(QueryCirculationSupplyResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/CirculationSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalRewardByEpoch(ctx context.Context, in *QueryTotalRewardByEpochRequest, opts ...grpc.CallOption) (*QueryTotalRewardByEpochResponse, error) {
	out := new(QueryTotalRewardByEpochResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/TotalRewardByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Metrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (*QueryMetricsResponse, error) {
	out := new(QueryMetricsResponse)
	err := c.cc.Invoke(ctx, "/stratos.pot.v1.Query/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// VolumeReport queries VolumeReport info for given epoch.
	VolumeReport(context.Context, *QueryVolumeReportRequest) (*QueryVolumeReportResponse, error)
	// RewardsByEpoch queries Pot rewards by a given epoch.
	RewardsByEpoch(context.Context, *QueryRewardsByEpochRequest) (*QueryRewardsByEpochResponse, error)
	// RewardsByOwner queries Pot rewards by a given beneficiary address.
	RewardsByWallet(context.Context, *QueryRewardsByWalletRequest) (*QueryRewardsByWalletResponse, error)
	// RewardsByWalletAndHeight queries Pot rewards by a given beneficiary address at the specific epoch.
	RewardsByWalletAndHeight(context.Context, *QueryRewardsByWalletAndHeightRequest) (*QueryRewardsByWalletAndHeightResponse, error)
	// RewardsByWalletAndEpoch queries Pot rewards by a given beneficiary address at the specific epoch.
	RewardsByWalletAndEpoch(context.Context, *QueryRewardsByWalletAndEpochRequest) (*QueryRewardsByWalletAndEpochResponse, error)
	// SlashingByOwner queries Pot slashing by owner wallet address.
	SlashingByOwner(context.Context, *QuerySlashingByOwnerRequest) (*QuerySlashingByOwnerResponse, error)
	// Params queries POT module Params info.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	TotalMinedToken(context.Context, *QueryTotalMinedTokenRequest) (*QueryTotalMinedTokenResponse, error)
	CirculationSupply(context.Context, *QueryCirculationSupplyRequest) (*QueryCirculationSupplyResponse, error)
	TotalRewardByEpoch(context.Context, *QueryTotalRewardByEpochRequest) (*QueryTotalRewardByEpochResponse, error)
	Metrics(context.Context, *QueryMetricsRequest) (*QueryMetricsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) VolumeReport(ctx context.Context, req *QueryVolumeReportRequest) (*QueryVolumeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeReport not implemented")
}
func (*UnimplementedQueryServer) RewardsByEpoch(ctx context.Context, req *QueryRewardsByEpochRequest) (*QueryRewardsByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByEpoch not implemented")
}
func (*UnimplementedQueryServer) RewardsByWallet(ctx context.Context, req *QueryRewardsByWalletRequest) (*QueryRewardsByWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByWallet not implemented")
}
func (*UnimplementedQueryServer) RewardsByWalletAndHeight(ctx context.Context, req *QueryRewardsByWalletAndHeightRequest) (*QueryRewardsByWalletAndHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByWalletAndHeight not implemented")
}
func (*UnimplementedQueryServer) RewardsByWalletAndEpoch(ctx context.Context, req *QueryRewardsByWalletAndEpochRequest) (*QueryRewardsByWalletAndEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByWalletAndEpoch not implemented")
}
func (*UnimplementedQueryServer) SlashingByOwner(ctx context.Context, req *QuerySlashingByOwnerRequest) (*QuerySlashingByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashingByOwner not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TotalMinedToken(ctx context.Context, req *QueryTotalMinedTokenRequest) (*QueryTotalMinedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMinedToken not implemented")
}
func (*UnimplementedQueryServer) CirculationSupply(ctx context.Context, req *QueryCirculationSupplyRequest) (*QueryCirculationSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CirculationSupply not implemented")
}
func (*UnimplementedQueryServer) TotalRewardByEpoch(ctx context.Context, req *QueryTotalRewardByEpochRequest) (*QueryTotalRewardByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRewardByEpoch not implemented")
}
func (*UnimplementedQueryServer) Metrics(ctx context.Context, req *QueryMetricsRequest) (*QueryMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_VolumeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVolumeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VolumeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/VolumeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VolumeReport(ctx, req.(*QueryVolumeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/RewardsByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByEpoch(ctx, req.(*QueryRewardsByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/RewardsByWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByWallet(ctx, req.(*QueryRewardsByWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByWalletAndHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByWalletAndHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByWalletAndHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/RewardsByWalletAndHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByWalletAndHeight(ctx, req.(*QueryRewardsByWalletAndHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByWalletAndEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByWalletAndEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByWalletAndEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/RewardsByWalletAndEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByWalletAndEpoch(ctx, req.(*QueryRewardsByWalletAndEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashingByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashingByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashingByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/SlashingByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashingByOwner(ctx, req.(*QuerySlashingByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalMinedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalMinedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalMinedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/TotalMinedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalMinedToken(ctx, req.(*QueryTotalMinedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CirculationSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCirculationSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CirculationSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/CirculationSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CirculationSupply(ctx, req.(*QueryCirculationSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalRewardByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRewardByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalRewardByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/TotalRewardByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalRewardByEpoch(ctx, req.(*QueryTotalRewardByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stratos.pot.v1.Query/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Metrics(ctx, req.(*QueryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stratos.pot.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeReport",
			Handler:    _Query_VolumeReport_Handler,
		},
		{
			MethodName: "RewardsByEpoch",
			Handler:    _Query_RewardsByEpoch_Handler,
		},
		{
			MethodName: "RewardsByWallet",
			Handler:    _Query_RewardsByWallet_Handler,
		},
		{
			MethodName: "RewardsByWalletAndHeight",
			Handler:    _Query_RewardsByWalletAndHeight_Handler,
		},
		{
			MethodName: "RewardsByWalletAndEpoch",
			Handler:    _Query_RewardsByWalletAndEpoch_Handler,
		},
		{
			MethodName: "SlashingByOwner",
			Handler:    _Query_SlashingByOwner_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TotalMinedToken",
			Handler:    _Query_TotalMinedToken_Handler,
		},
		{
			MethodName: "CirculationSupply",
			Handler:    _Query_CirculationSupply_Handler,
		},
		{
			MethodName: "TotalRewardByEpoch",
			Handler:    _Query_TotalRewardByEpoch_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _Query_Metrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stratos/pot/v1/query.proto",
}

func (m *QueryVolumeReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVolumeReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVolumeReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVolumeReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVolumeReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVolumeReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportInfo != nil {
		{
			size, err := m.ReportInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByWalletAndHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByWalletAndHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByWalletAndHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByWalletAndHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByWalletAndHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByWalletAndHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rewards != nil {
		{
			size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByWalletAndEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByWalletAndEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByWalletAndEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsByWalletAndEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsByWalletAndEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsByWalletAndEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardByWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardByWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardByWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ImmatureTotalReward) > 0 {
		for iNdEx := len(m.ImmatureTotalReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImmatureTotalReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MatureTotalReward) > 0 {
		for iNdEx := len(m.MatureTotalReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MatureTotalReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashingByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashingByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashingByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashingByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashingByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashingByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slashing) > 0 {
		i -= len(m.Slashing)
		copy(dAtA[i:], m.Slashing)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Slashing)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalMinedTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalMinedTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalMinedTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalMinedTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalMinedTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalMinedTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalMinedToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCirculationSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculationSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculationSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCirculationSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCirculationSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCirculationSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CirculationSupply) > 0 {
		for iNdEx := len(m.CirculationSupply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CirculationSupply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalRewardByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRewardByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRewardByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalRewardByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRewardByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRewardByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLegacy {
		i--
		if m.IsLegacy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.TotalReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVolumeReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryVolumeReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReportInfo != nil {
		l = m.ReportInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ReportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByWalletAndHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByWalletAndHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rewards != nil {
		l = m.Rewards.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByWalletAndEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsByWalletAndEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RewardByWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.MatureTotalReward) > 0 {
		for _, e := range m.MatureTotalReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ImmatureTotalReward) > 0 {
		for _, e := range m.ImmatureTotalReward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySlashingByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySlashingByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Slashing)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalMinedTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalMinedTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalMinedToken.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCirculationSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCirculationSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CirculationSupply) > 0 {
		for _, e := range m.CirculationSupply {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalRewardByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryTotalRewardByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsLegacy {
		n += 2
	}
	return n
}

func (m *QueryMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metrics.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVolumeReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVolumeReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVolumeReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVolumeReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVolumeReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVolumeReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReportInfo == nil {
				m.ReportInfo = &ReportInfo{}
			}
			if err := m.ReportInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &Reward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &RewardByWallet{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByWalletAndHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByWalletAndHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = &RewardByWallet{}
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByWalletAndEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsByWalletAndEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsByWalletAndEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &Reward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardByWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardByWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardByWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatureTotalReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatureTotalReward = append(m.MatureTotalReward, types.Coin{})
			if err := m.MatureTotalReward[len(m.MatureTotalReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmatureTotalReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImmatureTotalReward = append(m.ImmatureTotalReward, types.Coin{})
			if err := m.ImmatureTotalReward[len(m.ImmatureTotalReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashingByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashingByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashingByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashingByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashingByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashingByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slashing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalMinedTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalMinedTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalMinedTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalMinedTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalMinedTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalMinedTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMinedToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalMinedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculationSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculationSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculationSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCirculationSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCirculationSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCirculationSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CirculationSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CirculationSupply = append(m.CirculationSupply, types.Coin{})
			if err := m.CirculationSupply[len(m.CirculationSupply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRewardByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRewardByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRewardByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRewardByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRewardByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRewardByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLegacy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLegacy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
